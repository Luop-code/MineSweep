大家好
本期视频是LabVIEW扫雷
之前停了很久，主要是LabVIEW递归程序没能实现
后来查了很久，发现与其它编程语言没太大不同，是自己递归停止条件没设置好
还有就是显示效果及一下细节逻辑问题，比如：
不勾选平滑更新的话，显示效果极差，闪烁明显
还有图片控件的标签也是图片控件的一部分，也在鼠标单击响应范围，上方边界由标签顶部决定，因此导致计算单击点相对图片原点纵坐标出错，从而导致行号计算出错
等等...
先给大家看看效果
额。
下面看程序：
共计14个VI和一个位图
主程序.VI直接调用生成雷区.VI、处理8领域.VI、计算行列号.VI、游戏初始化.VI、处理单按.VI、绘制方块.VI、全局变量.VI、BMP初始化.VI
生成雷区.VI调用随机数生成.VI调用随机正整数.VI
处理8领域.VI调用处理单按.VI
处理单按.VI递归调用处理8领域.VI，还调用周围雷数.VI
是否合法.VI调用数组行列数.VI
前面板游戏区为一个图片控件，可以改大小，但是格子大小是固定的，被位图限制，方块大小为32个像素，目前图片为648*648，最多支持20*20
3个输入,2个显示,字面意思

先看最底层的BMP初始化.VI,也是游戏的基础(方块的定义),功能是将icons.bmp的图像数据拆分成小方块图像数组,再加上读取bmp文件得到的颜色、掩码，捆绑成簇输出
方块数组定义为：0~13对应未翻开、空白、周围雷数0~8、雷、不确定、旗子。周围雷数0这个方块是没必要的，但之前设计和调试时有用到，就保留了下来
框图就是一个简单的2层for循环，将表格排列的小方块提取出来，放入长整型3维数组
数组行列数.VI：太简单，跳过
是否合法.VI：输入一个整型数组地图，目标元素行列号。合法的条件是：行列号都小于限值(地图行列数)，大于等于0，目标位置元素为0或者12。这个地图数组存放的是待显示的方块在方块数组中的索引。0为未翻开、12为问号(未确定)，其它均为非法(不应有左键单击响应)。同时还输出对地图目标位置的索引结果
全局变量.VI：故名思义，就是能被跨VI调用的变量，没有框图，只有前面板，每个变量都可读写。游戏状态用于控制退出while循环，剩余方块用于游戏结束逻辑的判断，簇用于绘制方块.VI的绘制，简化连线
绘制方块.VI：输入原图片、待绘制方块ID、绘制位置行列号，输出新图片
框图就是简单的坐标计算、簇操作、数组操作、图片绘制，这全局变量引用倒是第一次出现。全局变量是一个独立的VI，因此也是通过选板选择VI插入，可以右键转换方向，单击选择访问的变量。如果已经有调用全局变量，也可以按住Ctrl拖动现有的全局变量引用更方便的添加
周围雷数.VI：数组整型二维数组雷区，目标位置行列号，输出目标位置周围雷数(8领域)。雷区数组储存了每一个位置是否是雷，0否1是，因此统计雷数只需2层for循环，累加索引到的元素即可，坐标越界索引到雷区数组的值也会是0，不影响统计。唯一要注意的是移位寄存器的使用及初始化为0
生成雷区.VI：输入空的雷区数组、首次单击位置、雷数，输出正确生成的雷区数组，每次生成需要调用随机数生成.VI调用随机正整数.VI，while循环内避开已生成的雷和首次单击点，雷数控制外层for循环，直至全部生成完毕
处理单按.VI：输入地图、雷区、图片、行列号，输出地图、图片。
首先判断目标点是否合法，非法直接结束，地图和图片都不会改变；
进入条件结构，更新剩余方块，索引雷区数组判断是否踩雷，索引雷区数组判断目标点周围雷数，如果为0，id加1，否则加2，然后以此id在行列号处绘制方块。即：周围没有雷时绘制空白而不是数字0，1~8绘制对应雷数的方块；
周围雷数为0还会控制内层条件结构，如果周围没有雷，将对此位置调用处理8领域.VI，实际就是对周围每个方块调用处理单按.VI。如果不为0则不能这样操作了
处理8邻域.VI：输入、输出同处理单按.VI，因为这儿需要转调用处理单按.VI。处理单按调用处理8邻域，处理8邻域又反过来调用处理单按，构成递归。因此这两个VI都需要设置为可重入。文件->VI属性->执行->共享副本重入执行
框图上，主体为一个for循环，对目标位置加上一个索引簇数组常量得到的偏移量。以每个新位置转调用处理单按.VI，如果返回踩雷，提前结束for循环。这里比较新奇的用法是：用自动索引隧道控制循环次数，给for循环添加停止条件以提前结束for循环
计算行列号.VI：简单的坐标计算，输入在图片上的鼠标按下响应得到的绝对坐标和图片的左、上边界绝对坐标，计算相对图片原点的相对坐标，再计算行列号
游戏初始化.VI：创建两个整型二维数组(地图和雷区),地图存放方块索引(0~13)，雷区存放是否是雷(0否1是)

下面就只有主程序.VI了：
前面板已经见过了，框图最外层为1个层叠顺序结构(共3帧，0-游戏初始化，1-游戏主体，2-游戏结束后)
第0帧，BMP初始化，局部变量、全局变量初始化，显示初始化。其中2层for循环就是显示初始化，将游戏初始化.VI输出的空地图绘制出来，当然，都是绘制的0号方块(未翻开，填充灰色)
第1帧，内含一个while循环，while循环包含一个事件结构和条件结构。事件结构检测在图片控件内的鼠标按下事件，获取按下的坐标和按钮(左键、右键还是中键)。以防万一，如果实在没有中键可以加上组合键逻辑替代，只需区分出3种按键模式即可
第2帧，内含一个条件结构，如果游戏结果为真(游戏失败)，则采用2层for循环，索引雷区数组，如果为1则绘制11号方块。即打印出所有雷的位置，游戏结束。随后弹出"游戏失败"对话框
否则弹出"扫雷成功"对话框
事件结构中将鼠标按下点坐标和图片位置传入计算行列号.VI获取行列号。图片位置是由图片控件的属性节点得到。还根据游戏状态、剩余方块、雷数计算游戏结果和输出whlie循环控制信号
如果游戏结束时剩余方块数大于雷数，说明是踩雷导致；否则是扫雷成功。
事件结构右边为一个条件结构，条件为鼠标按钮(1-左键，2-右键，3-中键)，0无响应
左键单击响应：根据局部变量start区分是否为第一次左键单击，如果为假表示为第一次左键单击，先避开次位置创建雷区，再调用处理单按.VI处理
右键单击响应：先以行列号索引地图，如果合法且当前方块ID为0或12或13才进行处理，否则直接传递，不更新图片、地图。中间层条件结构内需要更新地图、图片和剩余旗子。如果当前为0(未翻开)，右键插旗，旗子-1，绘制13号方块(旗子)；如果当前为12(问号，未确定)，则绘制0号方块，不涉及旗子数；如果当前为13，则绘制12号方块，旗子+1；-1为默认分支，不影响
中键单击响应，直接对当前位置调用处理8邻域.VI。如果已经被插了旗子或者已经被翻开，则单击无响应
OK，游戏成功，讲解、演示完毕
最后看看超大雷区
电脑不好不建议尝试，甚至怀疑是不是程序卡死了，拜拜























